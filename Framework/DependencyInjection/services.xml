<?xml version="1.0" ?>

<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <parameters>
        <parameter key="doctrine.dbal.connection_factory.class">Shopware\Framework\Doctrine\ConnectionFactory</parameter>

        <parameter key="shopware.slug.config" type="collection">
            <parameter key="regexp">/([^A-Za-z0-9\.]|-)+/</parameter>
            <parameter key="lowercase">false</parameter>
        </parameter>
    </parameters>

    <services>
        <service id="templating.loader.wrapped" alias="templating.loader" />

        <!-- database / doctrine -->
        <service id="Doctrine\DBAL\Connection" alias="doctrine.dbal.default_connection" public="true" />

        <service id="PDO" class="PDO" public="true" >
            <factory class="Shopware\Kernel" method="getConnection" />
        </service>

        <!-- plugins -->
        <service class="Shopware\Framework\Plugin\PluginCollection" id="Shopware\Framework\Plugin\PluginCollection" public="true">
            <factory service="kernel" method="getPlugins" />
        </service>

        <!-- Cache -->
        <service id="shopware.cache" alias="cache.app" />

        <!-- Config -->
        <service class="Shopware\Framework\Config\CacheWarmer" id="Shopware\Framework\Config\CacheWarmer">
            <tag name="kernel.cache_warmer" />

            <argument type="service" id="Doctrine\DBAL\Connection" />
            <argument type="service" id="Shopware\Framework\Config\ConfigService" />
        </service>

        <service class="Shopware\Framework\Config\ConfigService" id="Shopware\Framework\Config\ConfigService">
            <argument type="service" id="Doctrine\DBAL\Connection" />
        </service>

        <service class="Shopware\Framework\Config\CachedConfigService" decorates="Shopware\Framework\Config\ConfigService" id="Shopware\Framework\Config\CachedConfigService">
            <argument type="service" id="Shopware\Framework\Config\CachedConfigService.inner" />
            <argument type="service" id="shopware.cache" />
        </service>

        <service id="shopware.config" alias="Shopware\Framework\Config\Config" />
        <service synthetic="true" id="Shopware\Framework\Config\Config" class="Shopware\Framework\Config\Config" />

        <service class="Cocur\Slugify\Slugify" public="false" id="slugify">
            <argument>%shopware.slug.config%</argument>
        </service>


        <!-- Pluginsystem -->
        <service class="Shopware\Framework\Plugin\PluginManager" id="Shopware\Framework\Plugin\PluginManager">
            <argument>%kernel.plugin_dir%</argument>
            <argument type="service" id="kernel"/>
            <argument type="service" id="Doctrine\DBAL\Connection"/>
            <argument type="service" id="service_container"/>
            <argument type="service" id="Shopware\Framework\Plugin\RequirementValidator" />
        </service>

        <service class="Shopware\Framework\Plugin\XmlPluginInfoReader" id="Shopware\Framework\Plugin\XmlPluginInfoReader"/>

        <service class="Shopware\Framework\Plugin\RequirementValidator" id="Shopware\Framework\Plugin\RequirementValidator">
            <argument id="Shopware\Framework\Plugin\XmlPluginInfoReader" type="service"/>
        </service>

        <service class="Shopware\Framework\Plugin\Command\PluginUpdateCommand" id="Shopware\Framework\Plugin\Command\PluginUpdateCommand">
            <tag name="console.command" />
            <argument type="service" id="Shopware\Framework\Plugin\PluginManager" />
        </service>

        <service class="Shopware\Framework\Plugin\Command\PluginInstallCommand" id="Shopware\Framework\Plugin\Command\PluginInstallCommand">
            <tag name="console.command" />
            <argument type="service" id="Shopware\Framework\Plugin\PluginManager" />
        </service>

        <service class="Shopware\Framework\Plugin\Command\PluginActivateCommand" id="Shopware\Framework\Plugin\Command\PluginActivateCommand">
            <tag name="console.command" />
            <argument type="service" id="Shopware\Framework\Plugin\PluginManager" />
        </service>

        <service class="Shopware\Framework\Plugin\Command\PluginDeactivateCommand" id="Shopware\Framework\Plugin\Command\PluginDeactivateCommand">
            <tag name="console.command" />
            <argument type="service" id="Shopware\Framework\Plugin\PluginManager" />
        </service>

        <service class="Shopware\Framework\Plugin\Command\PluginUninstallCommand" id="Shopware\Framework\Plugin\Command\PluginUninstallCommand">
            <tag name="console.command" />
            <argument type="service" id="Shopware\Framework\Plugin\PluginManager" />
        </service>

        <service class="Shopware\Framework\Plugin\Command\PluginUpgradeCommand" id="Shopware\Framework\Plugin\Command\PluginUpgradeCommand">
            <tag name="console.command" />
            <argument type="service" id="Shopware\Framework\Plugin\PluginManager" />
        </service>

        <service class="Shopware\Framework\Plugin\Command\PluginListCommand" id="Shopware\Framework\Plugin\Command\PluginListCommand">
            <tag name="console.command" />
            <argument type="service" id="Shopware\Framework\Plugin\PluginManager" />
        </service>

        <service class="Shopware\Framework\Command\DemodataCommand" id="Shopware\Framework\Command\DemodataCommand">
            <tag name="console.command" command="framework:demodata" />
            <argument>framework:demodata</argument>
            <argument type="service" id="Shopware\Framework\ORM\Write\EntityWriter"/>
            <argument type="service" id="Shopware\Product\Service\VariantGenerator"/>
            <argument type="service" id="Shopware\Media\Strategy\StrategyFilesystem"/>
            <argument type="service" id="service_container"/>
        </service>

        <service class="Shopware\Framework\Command\CreateTenantCommand" id="Shopware\Framework\Command\CreateTenantCommand">
            <tag name="console.command" command="framework:create:tenant" />
            <argument>framework:create:tenant</argument>
            <argument type="service" id="Doctrine\DBAL\Connection"/>
        </service>

        <!-- Serializer -->
        <service class="Shopware\Framework\Serializer\StructNormalizer" id="Shopware\Framework\Serializer\StructNormalizer">
            <tag name="serializer.normalizer"/>
        </service>

        <service class="Shopware\Framework\Serializer\StructDecoder" id="Shopware\Framework\Serializer\StructDecoder">
            <tag name="serializer.encoder"/>
        </service>

        <!-- Routing -->

        <service class="Shopware\Framework\Routing\ApplicationSubscriber" id="Shopware\Framework\Routing\ApplicationSubscriber">
            <argument type="service" id="request_stack"/>
            <argument type="service" id="Shopware\Framework\Routing\RequestContextResolverInterface"/>
            <tag name="kernel.event_subscriber"/>
        </service>


        <!-- Twig -->
        <service class="Shopware\Framework\Twig\TemplateFinder" public="true" id="Shopware\Framework\Twig\TemplateFinder">
            <argument id="kernel" type="service"/>
            <argument id="twig.loader" type="service"/>
        </service>

        <service class="Shopware\Framework\Twig\InheritanceExtension" public="false" id="Shopware\Framework\Twig\InheritanceExtension">
            <tag name="twig.extension" />

            <argument type="service" id="Shopware\Framework\Twig\TemplateFinder" />
        </service>

        <service class="Twig_Extensions_Extension_Intl" id="twig.extension.intl">
            <tag name="twig.extension" />
        </service>

        <service class="Twig_Extensions_Extension_Text" id="twig.extension.text">
            <tag name="twig.extension" />
        </service>

        <service class="Shopware\Framework\Twig\InstanceOfExtension" id="Shopware\Framework\Twig\InstanceOfExtension">
            <tag name="twig.extension"/>
        </service>


        <service class="Shopware\Framework\Routing\ApiRequestContextResolver" id="Shopware\Framework\Routing\RequestContextResolverInterface">
            <argument id="security.token_storage" type="service"/>
        </service>

        <service class="Shopware\Framework\Routing\ApplicationRequestContextResolver"
                 decorates="Shopware\Framework\Routing\RequestContextResolverInterface"
                 id="Shopware\Framework\Routing\ApplicationRequestContextResolver">

            <argument id="Shopware\Framework\Routing\ApplicationRequestContextResolver.inner" type="service"/>
            <argument id="Shopware\StorefrontApi\Context\StorefrontContextService" type="service"/>
            <argument type="service" id="security.token_storage"/>
        </service>

    </services>
</container>
